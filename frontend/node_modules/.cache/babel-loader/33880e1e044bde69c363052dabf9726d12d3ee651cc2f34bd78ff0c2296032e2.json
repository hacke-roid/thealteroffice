{"ast":null,"code":"import crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nfunction subtleMapping(jwk) {\n  let algorithm;\n  let keyUsages;\n  switch (jwk.kty) {\n    case 'RSA':\n      {\n        switch (jwk.alg) {\n          case 'PS256':\n          case 'PS384':\n          case 'PS512':\n            algorithm = {\n              name: 'RSA-PSS',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'RS256':\n          case 'RS384':\n          case 'RS512':\n            algorithm = {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'RSA-OAEP':\n          case 'RSA-OAEP-256':\n          case 'RSA-OAEP-384':\n          case 'RSA-OAEP-512':\n            algorithm = {\n              name: 'RSA-OAEP',\n              hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`\n            };\n            keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    case 'EC':\n      {\n        switch (jwk.alg) {\n          case 'ES256':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-256'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ES384':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-384'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ES512':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-521'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ECDH-ES':\n          case 'ECDH-ES+A128KW':\n          case 'ECDH-ES+A192KW':\n          case 'ECDH-ES+A256KW':\n            algorithm = {\n              name: 'ECDH',\n              namedCurve: jwk.crv\n            };\n            keyUsages = jwk.d ? ['deriveBits'] : [];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    case 'OKP':\n      {\n        switch (jwk.alg) {\n          case 'EdDSA':\n            algorithm = {\n              name: jwk.crv\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n          case 'ECDH-ES':\n          case 'ECDH-ES+A128KW':\n          case 'ECDH-ES+A192KW':\n          case 'ECDH-ES+A256KW':\n            algorithm = {\n              name: jwk.crv\n            };\n            keyUsages = jwk.d ? ['deriveBits'] : [];\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n        break;\n      }\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n  }\n  return {\n    algorithm,\n    keyUsages\n  };\n}\nconst parse = async jwk => {\n  if (!jwk.alg) {\n    throw new TypeError('\"alg\" argument is required when \"jwk.alg\" is not present');\n  }\n  const {\n    algorithm,\n    keyUsages\n  } = subtleMapping(jwk);\n  const rest = [algorithm, jwk.ext ?? false, jwk.key_ops ?? keyUsages];\n  const keyData = {\n    ...jwk\n  };\n  delete keyData.alg;\n  delete keyData.use;\n  return crypto.subtle.importKey('jwk', keyData, ...rest);\n};\nexport default parse;","map":{"version":3,"names":["crypto","JOSENotSupported","subtleMapping","jwk","algorithm","keyUsages","kty","alg","name","hash","slice","d","parseInt","namedCurve","crv","parse","TypeError","rest","ext","key_ops","keyData","use","subtle","importKey"],"sources":["/home/kishan/NewBackEnd/frontend/node_modules/jose/dist/browser/runtime/jwk_to_key.js"],"sourcesContent":["import crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nfunction subtleMapping(jwk) {\n    let algorithm;\n    let keyUsages;\n    switch (jwk.kty) {\n        case 'RSA': {\n            switch (jwk.alg) {\n                case 'PS256':\n                case 'PS384':\n                case 'PS512':\n                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RS256':\n                case 'RS384':\n                case 'RS512':\n                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RSA-OAEP':\n                case 'RSA-OAEP-256':\n                case 'RSA-OAEP-384':\n                case 'RSA-OAEP-512':\n                    algorithm = {\n                        name: 'RSA-OAEP',\n                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,\n                    };\n                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'EC': {\n            switch (jwk.alg) {\n                case 'ES256':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES384':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES512':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'OKP': {\n            switch (jwk.alg) {\n                case 'EdDSA':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n    }\n    return { algorithm, keyUsages };\n}\nconst parse = async (jwk) => {\n    if (!jwk.alg) {\n        throw new TypeError('\"alg\" argument is required when \"jwk.alg\" is not present');\n    }\n    const { algorithm, keyUsages } = subtleMapping(jwk);\n    const rest = [\n        algorithm,\n        jwk.ext ?? false,\n        jwk.key_ops ?? keyUsages,\n    ];\n    const keyData = { ...jwk };\n    delete keyData.alg;\n    delete keyData.use;\n    return crypto.subtle.importKey('jwk', keyData, ...rest);\n};\nexport default parse;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}