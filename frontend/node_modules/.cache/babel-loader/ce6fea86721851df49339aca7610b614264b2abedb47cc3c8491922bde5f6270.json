{"ast":null,"code":"import { decode as base64url } from '../../runtime/base64url.js';\nimport decrypt from '../../runtime/decrypt.js';\nimport { JOSEAlgNotAllowed, JOSENotSupported, JWEInvalid } from '../../util/errors.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport isObject from '../../lib/is_object.js';\nimport decryptKeyManagement from '../../lib/decrypt_key_management.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport generateCek from '../../lib/cek.js';\nimport validateCrit from '../../lib/validate_crit.js';\nimport validateAlgorithms from '../../lib/validate_algorithms.js';\nexport async function flattenedDecrypt(jwe, key, options) {\n  if (!isObject(jwe)) {\n    throw new JWEInvalid('Flattened JWE must be an object');\n  }\n  if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {\n    throw new JWEInvalid('JOSE Header missing');\n  }\n  if (jwe.iv !== undefined && typeof jwe.iv !== 'string') {\n    throw new JWEInvalid('JWE Initialization Vector incorrect type');\n  }\n  if (typeof jwe.ciphertext !== 'string') {\n    throw new JWEInvalid('JWE Ciphertext missing or incorrect type');\n  }\n  if (jwe.tag !== undefined && typeof jwe.tag !== 'string') {\n    throw new JWEInvalid('JWE Authentication Tag incorrect type');\n  }\n  if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {\n    throw new JWEInvalid('JWE Protected Header incorrect type');\n  }\n  if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {\n    throw new JWEInvalid('JWE Encrypted Key incorrect type');\n  }\n  if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {\n    throw new JWEInvalid('JWE AAD incorrect type');\n  }\n  if (jwe.header !== undefined && !isObject(jwe.header)) {\n    throw new JWEInvalid('JWE Shared Unprotected Header incorrect type');\n  }\n  if (jwe.unprotected !== undefined && !isObject(jwe.unprotected)) {\n    throw new JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');\n  }\n  let parsedProt;\n  if (jwe.protected) {\n    try {\n      const protectedHeader = base64url(jwe.protected);\n      parsedProt = JSON.parse(decoder.decode(protectedHeader));\n    } catch {\n      throw new JWEInvalid('JWE Protected Header is invalid');\n    }\n  }\n  if (!isDisjoint(parsedProt, jwe.header, jwe.unprotected)) {\n    throw new JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');\n  }\n  const joseHeader = {\n    ...parsedProt,\n    ...jwe.header,\n    ...jwe.unprotected\n  };\n  validateCrit(JWEInvalid, new Map(), options?.crit, parsedProt, joseHeader);\n  if (joseHeader.zip !== undefined) {\n    throw new JOSENotSupported('JWE \"zip\" (Compression Algorithm) Header Parameter is not supported.');\n  }\n  const {\n    alg,\n    enc\n  } = joseHeader;\n  if (typeof alg !== 'string' || !alg) {\n    throw new JWEInvalid('missing JWE Algorithm (alg) in JWE Header');\n  }\n  if (typeof enc !== 'string' || !enc) {\n    throw new JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');\n  }\n  const keyManagementAlgorithms = options && validateAlgorithms('keyManagementAlgorithms', options.keyManagementAlgorithms);\n  const contentEncryptionAlgorithms = options && validateAlgorithms('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);\n  if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg) || !keyManagementAlgorithms && alg.startsWith('PBES2')) {\n    throw new JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter value not allowed');\n  }\n  if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {\n    throw new JOSEAlgNotAllowed('\"enc\" (Encryption Algorithm) Header Parameter value not allowed');\n  }\n  let encryptedKey;\n  if (jwe.encrypted_key !== undefined) {\n    try {\n      encryptedKey = base64url(jwe.encrypted_key);\n    } catch {\n      throw new JWEInvalid('Failed to base64url decode the encrypted_key');\n    }\n  }\n  let resolvedKey = false;\n  if (typeof key === 'function') {\n    key = await key(parsedProt, jwe);\n    resolvedKey = true;\n  }\n  let cek;\n  try {\n    cek = await decryptKeyManagement(alg, key, encryptedKey, joseHeader, options);\n  } catch (err) {\n    if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported) {\n      throw err;\n    }\n    cek = generateCek(enc);\n  }\n  let iv;\n  let tag;\n  if (jwe.iv !== undefined) {\n    try {\n      iv = base64url(jwe.iv);\n    } catch {\n      throw new JWEInvalid('Failed to base64url decode the iv');\n    }\n  }\n  if (jwe.tag !== undefined) {\n    try {\n      tag = base64url(jwe.tag);\n    } catch {\n      throw new JWEInvalid('Failed to base64url decode the tag');\n    }\n  }\n  const protectedHeader = encoder.encode(jwe.protected ?? '');\n  let additionalData;\n  if (jwe.aad !== undefined) {\n    additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(jwe.aad));\n  } else {\n    additionalData = protectedHeader;\n  }\n  let ciphertext;\n  try {\n    ciphertext = base64url(jwe.ciphertext);\n  } catch {\n    throw new JWEInvalid('Failed to base64url decode the ciphertext');\n  }\n  const plaintext = await decrypt(enc, cek, ciphertext, iv, tag, additionalData);\n  const result = {\n    plaintext\n  };\n  if (jwe.protected !== undefined) {\n    result.protectedHeader = parsedProt;\n  }\n  if (jwe.aad !== undefined) {\n    try {\n      result.additionalAuthenticatedData = base64url(jwe.aad);\n    } catch {\n      throw new JWEInvalid('Failed to base64url decode the aad');\n    }\n  }\n  if (jwe.unprotected !== undefined) {\n    result.sharedUnprotectedHeader = jwe.unprotected;\n  }\n  if (jwe.header !== undefined) {\n    result.unprotectedHeader = jwe.header;\n  }\n  if (resolvedKey) {\n    return {\n      ...result,\n      key\n    };\n  }\n  return result;\n}","map":{"version":3,"names":["decode","base64url","decrypt","JOSEAlgNotAllowed","JOSENotSupported","JWEInvalid","isDisjoint","isObject","decryptKeyManagement","encoder","decoder","concat","generateCek","validateCrit","validateAlgorithms","flattenedDecrypt","jwe","key","options","protected","undefined","header","unprotected","iv","ciphertext","tag","encrypted_key","aad","parsedProt","protectedHeader","JSON","parse","joseHeader","Map","crit","zip","alg","enc","keyManagementAlgorithms","contentEncryptionAlgorithms","has","startsWith","encryptedKey","resolvedKey","cek","err","TypeError","encode","additionalData","plaintext","result","additionalAuthenticatedData","sharedUnprotectedHeader","unprotectedHeader"],"sources":["/home/kishan/NewBackEnd/frontend/node_modules/jose/dist/browser/jwe/flattened/decrypt.js"],"sourcesContent":["import { decode as base64url } from '../../runtime/base64url.js';\nimport decrypt from '../../runtime/decrypt.js';\nimport { JOSEAlgNotAllowed, JOSENotSupported, JWEInvalid } from '../../util/errors.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport isObject from '../../lib/is_object.js';\nimport decryptKeyManagement from '../../lib/decrypt_key_management.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport generateCek from '../../lib/cek.js';\nimport validateCrit from '../../lib/validate_crit.js';\nimport validateAlgorithms from '../../lib/validate_algorithms.js';\nexport async function flattenedDecrypt(jwe, key, options) {\n    if (!isObject(jwe)) {\n        throw new JWEInvalid('Flattened JWE must be an object');\n    }\n    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {\n        throw new JWEInvalid('JOSE Header missing');\n    }\n    if (jwe.iv !== undefined && typeof jwe.iv !== 'string') {\n        throw new JWEInvalid('JWE Initialization Vector incorrect type');\n    }\n    if (typeof jwe.ciphertext !== 'string') {\n        throw new JWEInvalid('JWE Ciphertext missing or incorrect type');\n    }\n    if (jwe.tag !== undefined && typeof jwe.tag !== 'string') {\n        throw new JWEInvalid('JWE Authentication Tag incorrect type');\n    }\n    if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {\n        throw new JWEInvalid('JWE Protected Header incorrect type');\n    }\n    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {\n        throw new JWEInvalid('JWE Encrypted Key incorrect type');\n    }\n    if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {\n        throw new JWEInvalid('JWE AAD incorrect type');\n    }\n    if (jwe.header !== undefined && !isObject(jwe.header)) {\n        throw new JWEInvalid('JWE Shared Unprotected Header incorrect type');\n    }\n    if (jwe.unprotected !== undefined && !isObject(jwe.unprotected)) {\n        throw new JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');\n    }\n    let parsedProt;\n    if (jwe.protected) {\n        try {\n            const protectedHeader = base64url(jwe.protected);\n            parsedProt = JSON.parse(decoder.decode(protectedHeader));\n        }\n        catch {\n            throw new JWEInvalid('JWE Protected Header is invalid');\n        }\n    }\n    if (!isDisjoint(parsedProt, jwe.header, jwe.unprotected)) {\n        throw new JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');\n    }\n    const joseHeader = {\n        ...parsedProt,\n        ...jwe.header,\n        ...jwe.unprotected,\n    };\n    validateCrit(JWEInvalid, new Map(), options?.crit, parsedProt, joseHeader);\n    if (joseHeader.zip !== undefined) {\n        throw new JOSENotSupported('JWE \"zip\" (Compression Algorithm) Header Parameter is not supported.');\n    }\n    const { alg, enc } = joseHeader;\n    if (typeof alg !== 'string' || !alg) {\n        throw new JWEInvalid('missing JWE Algorithm (alg) in JWE Header');\n    }\n    if (typeof enc !== 'string' || !enc) {\n        throw new JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');\n    }\n    const keyManagementAlgorithms = options && validateAlgorithms('keyManagementAlgorithms', options.keyManagementAlgorithms);\n    const contentEncryptionAlgorithms = options &&\n        validateAlgorithms('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);\n    if ((keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) ||\n        (!keyManagementAlgorithms && alg.startsWith('PBES2'))) {\n        throw new JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter value not allowed');\n    }\n    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {\n        throw new JOSEAlgNotAllowed('\"enc\" (Encryption Algorithm) Header Parameter value not allowed');\n    }\n    let encryptedKey;\n    if (jwe.encrypted_key !== undefined) {\n        try {\n            encryptedKey = base64url(jwe.encrypted_key);\n        }\n        catch {\n            throw new JWEInvalid('Failed to base64url decode the encrypted_key');\n        }\n    }\n    let resolvedKey = false;\n    if (typeof key === 'function') {\n        key = await key(parsedProt, jwe);\n        resolvedKey = true;\n    }\n    let cek;\n    try {\n        cek = await decryptKeyManagement(alg, key, encryptedKey, joseHeader, options);\n    }\n    catch (err) {\n        if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported) {\n            throw err;\n        }\n        cek = generateCek(enc);\n    }\n    let iv;\n    let tag;\n    if (jwe.iv !== undefined) {\n        try {\n            iv = base64url(jwe.iv);\n        }\n        catch {\n            throw new JWEInvalid('Failed to base64url decode the iv');\n        }\n    }\n    if (jwe.tag !== undefined) {\n        try {\n            tag = base64url(jwe.tag);\n        }\n        catch {\n            throw new JWEInvalid('Failed to base64url decode the tag');\n        }\n    }\n    const protectedHeader = encoder.encode(jwe.protected ?? '');\n    let additionalData;\n    if (jwe.aad !== undefined) {\n        additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(jwe.aad));\n    }\n    else {\n        additionalData = protectedHeader;\n    }\n    let ciphertext;\n    try {\n        ciphertext = base64url(jwe.ciphertext);\n    }\n    catch {\n        throw new JWEInvalid('Failed to base64url decode the ciphertext');\n    }\n    const plaintext = await decrypt(enc, cek, ciphertext, iv, tag, additionalData);\n    const result = { plaintext };\n    if (jwe.protected !== undefined) {\n        result.protectedHeader = parsedProt;\n    }\n    if (jwe.aad !== undefined) {\n        try {\n            result.additionalAuthenticatedData = base64url(jwe.aad);\n        }\n        catch {\n            throw new JWEInvalid('Failed to base64url decode the aad');\n        }\n    }\n    if (jwe.unprotected !== undefined) {\n        result.sharedUnprotectedHeader = jwe.unprotected;\n    }\n    if (jwe.header !== undefined) {\n        result.unprotectedHeader = jwe.header;\n    }\n    if (resolvedKey) {\n        return { ...result, key };\n    }\n    return result;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}