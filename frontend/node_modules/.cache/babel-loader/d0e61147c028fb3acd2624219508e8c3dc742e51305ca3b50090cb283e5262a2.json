{"ast":null,"code":"import crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport async function generateSecret(alg, options) {\n  let length;\n  let algorithm;\n  let keyUsages;\n  switch (alg) {\n    case 'HS256':\n    case 'HS384':\n    case 'HS512':\n      length = parseInt(alg.slice(-3), 10);\n      algorithm = {\n        name: 'HMAC',\n        hash: `SHA-${length}`,\n        length\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      length = parseInt(alg.slice(-3), 10);\n      return random(new Uint8Array(length >> 3));\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      length = parseInt(alg.slice(1, 4), 10);\n      algorithm = {\n        name: 'AES-KW',\n        length\n      };\n      keyUsages = ['wrapKey', 'unwrapKey'];\n      break;\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      length = parseInt(alg.slice(1, 4), 10);\n      algorithm = {\n        name: 'AES-GCM',\n        length\n      };\n      keyUsages = ['encrypt', 'decrypt'];\n      break;\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n  }\n  return crypto.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);\n}\nfunction getModulusLengthOption(options) {\n  const modulusLength = options?.modulusLength ?? 2048;\n  if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n    throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n  }\n  return modulusLength;\n}\nexport async function generateKeyPair(alg, options) {\n  let algorithm;\n  let keyUsages;\n  switch (alg) {\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      algorithm = {\n        name: 'RSA-PSS',\n        hash: `SHA-${alg.slice(-3)}`,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        modulusLength: getModulusLengthOption(options)\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      algorithm = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: `SHA-${alg.slice(-3)}`,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        modulusLength: getModulusLengthOption(options)\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      algorithm = {\n        name: 'RSA-OAEP',\n        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        modulusLength: getModulusLengthOption(options)\n      };\n      keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n      break;\n    case 'ES256':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-256'\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n    case 'ES384':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-384'\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n    case 'ES512':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-521'\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n    case 'EdDSA':\n      {\n        keyUsages = ['sign', 'verify'];\n        const crv = options?.crv ?? 'Ed25519';\n        switch (crv) {\n          case 'Ed25519':\n          case 'Ed448':\n            algorithm = {\n              name: crv\n            };\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported crv option provided');\n        }\n        break;\n      }\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        keyUsages = ['deriveKey', 'deriveBits'];\n        const crv = options?.crv ?? 'P-256';\n        switch (crv) {\n          case 'P-256':\n          case 'P-384':\n          case 'P-521':\n            {\n              algorithm = {\n                name: 'ECDH',\n                namedCurve: crv\n              };\n              break;\n            }\n          case 'X25519':\n          case 'X448':\n            algorithm = {\n              name: crv\n            };\n            break;\n          default:\n            throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');\n        }\n        break;\n      }\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n  }\n  return crypto.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);\n}","map":{"version":3,"names":["crypto","JOSENotSupported","random","generateSecret","alg","options","length","algorithm","keyUsages","parseInt","slice","name","hash","Uint8Array","subtle","generateKey","extractable","getModulusLengthOption","modulusLength","generateKeyPair","publicExponent","namedCurve","crv"],"sources":["/home/kishan/TheAlterOffice/frontend/node_modules/jose/dist/browser/runtime/generate.js"],"sourcesContent":["import crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport async function generateSecret(alg, options) {\n    let length;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            length = parseInt(alg.slice(-3), 10);\n            algorithm = { name: 'HMAC', hash: `SHA-${length}`, length };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'A128CBC-HS256':\n        case 'A192CBC-HS384':\n        case 'A256CBC-HS512':\n            length = parseInt(alg.slice(-3), 10);\n            return random(new Uint8Array(length >> 3));\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-KW', length };\n            keyUsages = ['wrapKey', 'unwrapKey'];\n            break;\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW':\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-GCM', length };\n            keyUsages = ['encrypt', 'decrypt'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return crypto.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);\n}\nfunction getModulusLengthOption(options) {\n    const modulusLength = options?.modulusLength ?? 2048;\n    if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n        throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n    }\n    return modulusLength;\n}\nexport async function generateKeyPair(alg, options) {\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = {\n                name: 'RSA-PSS',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = {\n                name: 'RSASSA-PKCS1-v1_5',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'EdDSA': {\n            keyUsages = ['sign', 'verify'];\n            const crv = options?.crv ?? 'Ed25519';\n            switch (crv) {\n                case 'Ed25519':\n                case 'Ed448':\n                    algorithm = { name: crv };\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided');\n            }\n            break;\n        }\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            keyUsages = ['deriveKey', 'deriveBits'];\n            const crv = options?.crv ?? 'P-256';\n            switch (crv) {\n                case 'P-256':\n                case 'P-384':\n                case 'P-521': {\n                    algorithm = { name: 'ECDH', namedCurve: crv };\n                    break;\n                }\n                case 'X25519':\n                case 'X448':\n                    algorithm = { name: crv };\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');\n            }\n            break;\n        }\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return crypto.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}