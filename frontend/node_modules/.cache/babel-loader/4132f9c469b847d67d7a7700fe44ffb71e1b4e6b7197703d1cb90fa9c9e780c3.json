{"ast":null,"code":"import { isJWK } from '../lib/is_jwk.js';\nimport { decode } from './base64url.js';\nimport importJWK from './jwk_to_key.js';\nconst exportKeyValue = k => decode(k);\nlet privCache;\nlet pubCache;\nconst isKeyObject = key => {\n  return key?.[Symbol.toStringTag] === 'KeyObject';\n};\nconst importAndCache = async (cache, key, jwk, alg, freeze = false) => {\n  let cached = cache.get(key);\n  if (cached?.[alg]) {\n    return cached[alg];\n  }\n  const cryptoKey = await importJWK({\n    ...jwk,\n    alg\n  });\n  if (freeze) Object.freeze(key);\n  if (!cached) {\n    cache.set(key, {\n      [alg]: cryptoKey\n    });\n  } else {\n    cached[alg] = cryptoKey;\n  }\n  return cryptoKey;\n};\nconst normalizePublicKey = (key, alg) => {\n  if (isKeyObject(key)) {\n    let jwk = key.export({\n      format: 'jwk'\n    });\n    delete jwk.d;\n    delete jwk.dp;\n    delete jwk.dq;\n    delete jwk.p;\n    delete jwk.q;\n    delete jwk.qi;\n    if (jwk.k) {\n      return exportKeyValue(jwk.k);\n    }\n    pubCache || (pubCache = new WeakMap());\n    return importAndCache(pubCache, key, jwk, alg);\n  }\n  if (isJWK(key)) {\n    if (key.k) return decode(key.k);\n    pubCache || (pubCache = new WeakMap());\n    const cryptoKey = importAndCache(pubCache, key, key, alg, true);\n    return cryptoKey;\n  }\n  return key;\n};\nconst normalizePrivateKey = (key, alg) => {\n  if (isKeyObject(key)) {\n    let jwk = key.export({\n      format: 'jwk'\n    });\n    if (jwk.k) {\n      return exportKeyValue(jwk.k);\n    }\n    privCache || (privCache = new WeakMap());\n    return importAndCache(privCache, key, jwk, alg);\n  }\n  if (isJWK(key)) {\n    if (key.k) return decode(key.k);\n    privCache || (privCache = new WeakMap());\n    const cryptoKey = importAndCache(privCache, key, key, alg, true);\n    return cryptoKey;\n  }\n  return key;\n};\nexport default {\n  normalizePublicKey,\n  normalizePrivateKey\n};","map":{"version":3,"names":["isJWK","decode","importJWK","exportKeyValue","k","privCache","pubCache","isKeyObject","key","Symbol","toStringTag","importAndCache","cache","jwk","alg","freeze","cached","get","cryptoKey","Object","set","normalizePublicKey","export","format","d","dp","dq","p","q","qi","WeakMap","normalizePrivateKey"],"sources":["/home/kishan/NewBackEnd/frontend/node_modules/jose/dist/browser/runtime/normalize_key.js"],"sourcesContent":["import { isJWK } from '../lib/is_jwk.js';\nimport { decode } from './base64url.js';\nimport importJWK from './jwk_to_key.js';\nconst exportKeyValue = (k) => decode(k);\nlet privCache;\nlet pubCache;\nconst isKeyObject = (key) => {\n    return key?.[Symbol.toStringTag] === 'KeyObject';\n};\nconst importAndCache = async (cache, key, jwk, alg, freeze = false) => {\n    let cached = cache.get(key);\n    if (cached?.[alg]) {\n        return cached[alg];\n    }\n    const cryptoKey = await importJWK({ ...jwk, alg });\n    if (freeze)\n        Object.freeze(key);\n    if (!cached) {\n        cache.set(key, { [alg]: cryptoKey });\n    }\n    else {\n        cached[alg] = cryptoKey;\n    }\n    return cryptoKey;\n};\nconst normalizePublicKey = (key, alg) => {\n    if (isKeyObject(key)) {\n        let jwk = key.export({ format: 'jwk' });\n        delete jwk.d;\n        delete jwk.dp;\n        delete jwk.dq;\n        delete jwk.p;\n        delete jwk.q;\n        delete jwk.qi;\n        if (jwk.k) {\n            return exportKeyValue(jwk.k);\n        }\n        pubCache || (pubCache = new WeakMap());\n        return importAndCache(pubCache, key, jwk, alg);\n    }\n    if (isJWK(key)) {\n        if (key.k)\n            return decode(key.k);\n        pubCache || (pubCache = new WeakMap());\n        const cryptoKey = importAndCache(pubCache, key, key, alg, true);\n        return cryptoKey;\n    }\n    return key;\n};\nconst normalizePrivateKey = (key, alg) => {\n    if (isKeyObject(key)) {\n        let jwk = key.export({ format: 'jwk' });\n        if (jwk.k) {\n            return exportKeyValue(jwk.k);\n        }\n        privCache || (privCache = new WeakMap());\n        return importAndCache(privCache, key, jwk, alg);\n    }\n    if (isJWK(key)) {\n        if (key.k)\n            return decode(key.k);\n        privCache || (privCache = new WeakMap());\n        const cryptoKey = importAndCache(privCache, key, key, alg, true);\n        return cryptoKey;\n    }\n    return key;\n};\nexport default { normalizePublicKey, normalizePrivateKey };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}