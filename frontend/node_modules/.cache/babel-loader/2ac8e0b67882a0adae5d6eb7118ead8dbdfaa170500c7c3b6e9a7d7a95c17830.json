{"ast":null,"code":"import { withAlg as invalidKeyInput } from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nimport * as jwk from './is_jwk.js';\nconst tag = key => key?.[Symbol.toStringTag];\nconst jwkMatchesOp = (alg, key, usage) => {\n  if (key.use !== undefined && key.use !== 'sig') {\n    throw new TypeError('Invalid key for this operation, when present its use must be sig');\n  }\n  if (key.key_ops !== undefined && key.key_ops.includes?.(usage) !== true) {\n    throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${usage}`);\n  }\n  if (key.alg !== undefined && key.alg !== alg) {\n    throw new TypeError(`Invalid key for this operation, when present its alg must be ${alg}`);\n  }\n  return true;\n};\nconst symmetricTypeCheck = (alg, key, usage, allowJwk) => {\n  if (key instanceof Uint8Array) return;\n  if (allowJwk && jwk.isJWK(key)) {\n    if (jwk.isSecretJWK(key) && jwkMatchesOp(alg, key, usage)) return;\n    throw new TypeError(`JSON Web Key for symmetric algorithms must have JWK \"kty\" (Key Type) equal to \"oct\" and the JWK \"k\" (Key Value) present`);\n  }\n  if (!isKeyLike(key)) {\n    throw new TypeError(invalidKeyInput(alg, key, ...types, 'Uint8Array', allowJwk ? 'JSON Web Key' : null));\n  }\n  if (key.type !== 'secret') {\n    throw new TypeError(`${tag(key)} instances for symmetric algorithms must be of type \"secret\"`);\n  }\n};\nconst asymmetricTypeCheck = (alg, key, usage, allowJwk) => {\n  if (allowJwk && jwk.isJWK(key)) {\n    switch (usage) {\n      case 'sign':\n        if (jwk.isPrivateJWK(key) && jwkMatchesOp(alg, key, usage)) return;\n        throw new TypeError(`JSON Web Key for this operation be a private JWK`);\n      case 'verify':\n        if (jwk.isPublicJWK(key) && jwkMatchesOp(alg, key, usage)) return;\n        throw new TypeError(`JSON Web Key for this operation be a public JWK`);\n    }\n  }\n  if (!isKeyLike(key)) {\n    throw new TypeError(invalidKeyInput(alg, key, ...types, allowJwk ? 'JSON Web Key' : null));\n  }\n  if (key.type === 'secret') {\n    throw new TypeError(`${tag(key)} instances for asymmetric algorithms must not be of type \"secret\"`);\n  }\n  if (usage === 'sign' && key.type === 'public') {\n    throw new TypeError(`${tag(key)} instances for asymmetric algorithm signing must be of type \"private\"`);\n  }\n  if (usage === 'decrypt' && key.type === 'public') {\n    throw new TypeError(`${tag(key)} instances for asymmetric algorithm decryption must be of type \"private\"`);\n  }\n  if (key.algorithm && usage === 'verify' && key.type === 'private') {\n    throw new TypeError(`${tag(key)} instances for asymmetric algorithm verifying must be of type \"public\"`);\n  }\n  if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n    throw new TypeError(`${tag(key)} instances for asymmetric algorithm encryption must be of type \"public\"`);\n  }\n};\nfunction checkKeyType(allowJwk, alg, key, usage) {\n  const symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\\d{3}(?:GCM)?KW$/.test(alg);\n  if (symmetric) {\n    symmetricTypeCheck(alg, key, usage, allowJwk);\n  } else {\n    asymmetricTypeCheck(alg, key, usage, allowJwk);\n  }\n}\nexport default checkKeyType.bind(undefined, false);\nexport const checkKeyTypeWithJwk = checkKeyType.bind(undefined, true);","map":{"version":3,"names":["withAlg","invalidKeyInput","isKeyLike","types","jwk","tag","key","Symbol","toStringTag","jwkMatchesOp","alg","usage","use","undefined","TypeError","key_ops","includes","symmetricTypeCheck","allowJwk","Uint8Array","isJWK","isSecretJWK","type","asymmetricTypeCheck","isPrivateJWK","isPublicJWK","algorithm","checkKeyType","symmetric","startsWith","test","bind","checkKeyTypeWithJwk"],"sources":["/home/kishan/NewBackEnd/frontend/node_modules/jose/dist/browser/lib/check_key_type.js"],"sourcesContent":["import { withAlg as invalidKeyInput } from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nimport * as jwk from './is_jwk.js';\nconst tag = (key) => key?.[Symbol.toStringTag];\nconst jwkMatchesOp = (alg, key, usage) => {\n    if (key.use !== undefined && key.use !== 'sig') {\n        throw new TypeError('Invalid key for this operation, when present its use must be sig');\n    }\n    if (key.key_ops !== undefined && key.key_ops.includes?.(usage) !== true) {\n        throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${usage}`);\n    }\n    if (key.alg !== undefined && key.alg !== alg) {\n        throw new TypeError(`Invalid key for this operation, when present its alg must be ${alg}`);\n    }\n    return true;\n};\nconst symmetricTypeCheck = (alg, key, usage, allowJwk) => {\n    if (key instanceof Uint8Array)\n        return;\n    if (allowJwk && jwk.isJWK(key)) {\n        if (jwk.isSecretJWK(key) && jwkMatchesOp(alg, key, usage))\n            return;\n        throw new TypeError(`JSON Web Key for symmetric algorithms must have JWK \"kty\" (Key Type) equal to \"oct\" and the JWK \"k\" (Key Value) present`);\n    }\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types, 'Uint8Array', allowJwk ? 'JSON Web Key' : null));\n    }\n    if (key.type !== 'secret') {\n        throw new TypeError(`${tag(key)} instances for symmetric algorithms must be of type \"secret\"`);\n    }\n};\nconst asymmetricTypeCheck = (alg, key, usage, allowJwk) => {\n    if (allowJwk && jwk.isJWK(key)) {\n        switch (usage) {\n            case 'sign':\n                if (jwk.isPrivateJWK(key) && jwkMatchesOp(alg, key, usage))\n                    return;\n                throw new TypeError(`JSON Web Key for this operation be a private JWK`);\n            case 'verify':\n                if (jwk.isPublicJWK(key) && jwkMatchesOp(alg, key, usage))\n                    return;\n                throw new TypeError(`JSON Web Key for this operation be a public JWK`);\n        }\n    }\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(alg, key, ...types, allowJwk ? 'JSON Web Key' : null));\n    }\n    if (key.type === 'secret') {\n        throw new TypeError(`${tag(key)} instances for asymmetric algorithms must not be of type \"secret\"`);\n    }\n    if (usage === 'sign' && key.type === 'public') {\n        throw new TypeError(`${tag(key)} instances for asymmetric algorithm signing must be of type \"private\"`);\n    }\n    if (usage === 'decrypt' && key.type === 'public') {\n        throw new TypeError(`${tag(key)} instances for asymmetric algorithm decryption must be of type \"private\"`);\n    }\n    if (key.algorithm && usage === 'verify' && key.type === 'private') {\n        throw new TypeError(`${tag(key)} instances for asymmetric algorithm verifying must be of type \"public\"`);\n    }\n    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n        throw new TypeError(`${tag(key)} instances for asymmetric algorithm encryption must be of type \"public\"`);\n    }\n};\nfunction checkKeyType(allowJwk, alg, key, usage) {\n    const symmetric = alg.startsWith('HS') ||\n        alg === 'dir' ||\n        alg.startsWith('PBES2') ||\n        /^A\\d{3}(?:GCM)?KW$/.test(alg);\n    if (symmetric) {\n        symmetricTypeCheck(alg, key, usage, allowJwk);\n    }\n    else {\n        asymmetricTypeCheck(alg, key, usage, allowJwk);\n    }\n}\nexport default checkKeyType.bind(undefined, false);\nexport const checkKeyTypeWithJwk = checkKeyType.bind(undefined, true);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}