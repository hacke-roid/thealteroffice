{"ast":null,"code":"import crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkSigCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nimport normalize from './normalize_key.js';\nexport default async function getCryptoKey(alg, key, usage) {\n  if (usage === 'sign') {\n    key = await normalize.normalizePrivateKey(key, alg);\n  }\n  if (usage === 'verify') {\n    key = await normalize.normalizePublicKey(key, alg);\n  }\n  if (isCryptoKey(key)) {\n    checkSigCryptoKey(key, alg, usage);\n    return key;\n  }\n  if (key instanceof Uint8Array) {\n    if (!alg.startsWith('HS')) {\n      throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    return crypto.subtle.importKey('raw', key, {\n      hash: `SHA-${alg.slice(-3)}`,\n      name: 'HMAC'\n    }, false, [usage]);\n  }\n  throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array', 'JSON Web Key'));\n}","map":{"version":3,"names":["crypto","isCryptoKey","checkSigCryptoKey","invalidKeyInput","types","normalize","getCryptoKey","alg","key","usage","normalizePrivateKey","normalizePublicKey","Uint8Array","startsWith","TypeError","subtle","importKey","hash","slice","name"],"sources":["/home/kishan/NewBackEnd/frontend/node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"],"sourcesContent":["import crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkSigCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nimport normalize from './normalize_key.js';\nexport default async function getCryptoKey(alg, key, usage) {\n    if (usage === 'sign') {\n        key = await normalize.normalizePrivateKey(key, alg);\n    }\n    if (usage === 'verify') {\n        key = await normalize.normalizePublicKey(key, alg);\n    }\n    if (isCryptoKey(key)) {\n        checkSigCryptoKey(key, alg, usage);\n        return key;\n    }\n    if (key instanceof Uint8Array) {\n        if (!alg.startsWith('HS')) {\n            throw new TypeError(invalidKeyInput(key, ...types));\n        }\n        return crypto.subtle.importKey('raw', key, { hash: `SHA-${alg.slice(-3)}`, name: 'HMAC' }, false, [usage]);\n    }\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array', 'JSON Web Key'));\n}\n"],"mappings":"AAAA,OAAOA,MAAM,IAAIC,WAAW,QAAQ,gBAAgB;AACpD,SAASC,iBAAiB,QAAQ,sBAAsB;AACxD,OAAOC,eAAe,MAAM,6BAA6B;AACzD,SAASC,KAAK,QAAQ,kBAAkB;AACxC,OAAOC,SAAS,MAAM,oBAAoB;AAC1C,eAAe,eAAeC,YAAYA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACxD,IAAIA,KAAK,KAAK,MAAM,EAAE;IAClBD,GAAG,GAAG,MAAMH,SAAS,CAACK,mBAAmB,CAACF,GAAG,EAAED,GAAG,CAAC;EACvD;EACA,IAAIE,KAAK,KAAK,QAAQ,EAAE;IACpBD,GAAG,GAAG,MAAMH,SAAS,CAACM,kBAAkB,CAACH,GAAG,EAAED,GAAG,CAAC;EACtD;EACA,IAAIN,WAAW,CAACO,GAAG,CAAC,EAAE;IAClBN,iBAAiB,CAACM,GAAG,EAAED,GAAG,EAAEE,KAAK,CAAC;IAClC,OAAOD,GAAG;EACd;EACA,IAAIA,GAAG,YAAYI,UAAU,EAAE;IAC3B,IAAI,CAACL,GAAG,CAACM,UAAU,CAAC,IAAI,CAAC,EAAE;MACvB,MAAM,IAAIC,SAAS,CAACX,eAAe,CAACK,GAAG,EAAE,GAAGJ,KAAK,CAAC,CAAC;IACvD;IACA,OAAOJ,MAAM,CAACe,MAAM,CAACC,SAAS,CAAC,KAAK,EAAER,GAAG,EAAE;MAAES,IAAI,EAAE,OAAOV,GAAG,CAACW,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAO,CAAC,EAAE,KAAK,EAAE,CAACV,KAAK,CAAC,CAAC;EAC9G;EACA,MAAM,IAAIK,SAAS,CAACX,eAAe,CAACK,GAAG,EAAE,GAAGJ,KAAK,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}